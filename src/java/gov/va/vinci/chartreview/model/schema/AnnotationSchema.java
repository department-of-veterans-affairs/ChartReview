package gov.va.vinci.chartreview.model.schema;

// Generated Mar 8, 2011 3:41:01 PM by Hibernate Tools 3.2.4.GA


import org.apache.commons.lang.builder.ToStringBuilder;

import javax.persistence.*;
import java.sql.Timestamp;
import java.util.*;

/**
 * AnnotationSchema generated by hbm2java
 */
@Entity
public class AnnotationSchema implements java.io.Serializable, Comparable<AnnotationSchema> {
    private String id;
    private String name = "New_Schema";
    private int type = 0;
    private String description;
    private List<AttributeDef> attributeDefs = new ArrayList<AttributeDef>(0);
    private List<ClassDef> classDefs = new ArrayList<ClassDef>(0);
    private List<ClassRelDef> classRelDefs = new ArrayList<ClassRelDef>(0);
    private List<AnnotationSchemaAttributeDefSortOrder> attributeDefSortOrders = new ArrayList<AnnotationSchemaAttributeDefSortOrder>(0);
    private List<AnnotationSchemaClassDefSortOrder> classDefSortOrders = new ArrayList<AnnotationSchemaClassDefSortOrder>(0);
    private List<AnnotationSchemaClassRelDefSortOrder> classRelDefSortOrders = new ArrayList<AnnotationSchemaClassRelDefSortOrder>(0);
    private Timestamp version = new Timestamp((new Date()).getTime());

    public AnnotationSchema() {
    }

    public AnnotationSchema(AnnotationSchema obj) {
        this(obj, false);
    }

    public AnnotationSchema(AnnotationSchema obj, boolean augmentName) {
        this(
                UUID.randomUUID().toString(),
                augmentName ? obj.name + "_copy" : obj.name,
                obj.type,
                obj.description
        );
        Map attributeDefMap = new HashMap<AttributeDef, AttributeDef>();
        Map classDefMap = new HashMap<ClassDef, ClassDef>();
        for (Iterator iter = obj.attributeDefs.iterator(); iter.hasNext(); ) {
            AttributeDef attributeDef = (AttributeDef) iter.next();
            AttributeDef newAttributeDef = new AttributeDef(attributeDef);
            this.addAttributeDef(newAttributeDef);
            attributeDefMap.put(attributeDef, newAttributeDef);
            for (Iterator iter2 = obj.attributeDefSortOrders.iterator(); iter2.hasNext(); ) {
                AnnotationSchemaAttributeDefSortOrder sortOrder = (AnnotationSchemaAttributeDefSortOrder) iter2.next();
                if(attributeDef.getId().compareTo(sortOrder.getObjId()) == 0) {
                    AnnotationSchemaAttributeDefSortOrder newSortOrder = new AnnotationSchemaAttributeDefSortOrder(sortOrder);
                    newSortOrder.setObjId(newAttributeDef.getId());
                    this.addAttributeDefSortOrder(newSortOrder);
                }
            }
        }
        // NOTE: During the classDef copy constructor, we won't copy the sub-class lists.
        // We will copy them after ALL sub-classes have been copied.
        ArrayList<ClassDef> classDefsToCopy = new ArrayList<ClassDef>(obj.getClassDefs());
        for (Iterator iter = obj.classDefs.iterator(); iter.hasNext(); ) {
            ClassDef origClassDef = (ClassDef) iter.next();
            ClassDef newClassDef = new ClassDef(origClassDef, attributeDefMap, null, false);
            // Save objCopy and add it to its parent after copying the sub-class references
            classDefMap.put(origClassDef, newClassDef);
        }
        // Now copy the sub-class references.
        for (Iterator iter = classDefsToCopy.iterator(); iter.hasNext(); ) {
            ClassDef origClassDef = (ClassDef) iter.next();
            ClassDef newClassDef = (ClassDef) classDefMap.get(origClassDef);
            this.addClassDef(newClassDef);
            for (Iterator iter2 = origClassDef.getClassDefs().iterator(); iter2.hasNext(); ) {
                ClassDef subClassDef = (ClassDef) iter2.next();
                ClassDef newSubClassDef = (ClassDef) classDefMap.get(subClassDef);
                newClassDef.addClassDef(newSubClassDef);
            }
            classDefMap.put(origClassDef, newClassDef); // put it in the map again, it has been changed
            for (Iterator iter2 = obj.classDefSortOrders.iterator(); iter2.hasNext(); ) {
                AnnotationSchemaClassDefSortOrder sortOrder = (AnnotationSchemaClassDefSortOrder) iter2.next();
                if(origClassDef.getId().compareTo(sortOrder.getObjId()) == 0) {
                    AnnotationSchemaClassDefSortOrder newSortOrder = new AnnotationSchemaClassDefSortOrder(sortOrder);
                    newSortOrder.setObjId(newClassDef.getId());
                    this.addClassDefSortOrder(newSortOrder);
                }
            }
        }
        for (Iterator iter = obj.classRelDefs.iterator(); iter.hasNext(); ) {
            ClassRelDef classRelDef = (ClassRelDef) iter.next();
            ClassRelDef newClassRelDef = new ClassRelDef(classRelDef, attributeDefMap, classDefMap);
            this.addClassRelDef(newClassRelDef);
            for (Iterator iter2 = obj.classRelDefSortOrders.iterator(); iter2.hasNext(); ) {
                AnnotationSchemaClassRelDefSortOrder sortOrder = (AnnotationSchemaClassRelDefSortOrder) iter2.next();
                if(classRelDef.getId().compareTo(sortOrder.getObjId()) == 0) {
                    AnnotationSchemaClassRelDefSortOrder newSortOrder = new AnnotationSchemaClassRelDefSortOrder(sortOrder);
                    newSortOrder.setObjId(newClassRelDef.getId());
                    this.addClassRelDefSortOrder(newSortOrder);
                }
            }
        }
    }

    public AnnotationSchema(String uid, String name) {
        this.id = uid;
        this.name = name;
    }

    public AnnotationSchema(String uid, String name, int type, String description) {
        this(uid, name);
        this.type = type;
        this.description = description;
    }

    public AnnotationSchema(String uid, String name, int type, String description, ArrayList<ClassDef> classDefs, ArrayList<AttributeDef> attributeDefs, ArrayList<ClassRelDef> classRelDefs) {
        this(uid, name);
        this.type = type;
        this.description = description;
        this.classDefs = classDefs;
        this.attributeDefs = attributeDefs;
        this.classRelDefs = classRelDefs;
    }

    @Id
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    @OrderBy("name")
    public List<AttributeDef> getAttributeDefs() {
        return this.attributeDefs;
    }

    public List<AttributeDef> doGetAttributeDefsSorted() {
        return sortAttributeDefs(this.attributeDefs);
    }

    public List<AttributeDef> sortAttributeDefs(List<AttributeDef> attributeDefs) {
        List<AttributeDef> attributeDefsSorted = new ArrayList<AttributeDef>();
        List<AnnotationSchemaAttributeDefSortOrder> attributeDefSortOrders = new ArrayList<AnnotationSchemaAttributeDefSortOrder>();
        List<AttributeDef> unsorted = new ArrayList<AttributeDef>();
        for(int i = 0; i < attributeDefs.size(); i++)
        {
            AttributeDef attributeDef = attributeDefs.get(i);
            AnnotationSchemaAttributeDefSortOrder sortOrder = this.findAttributeDefSortOrder(attributeDef);
            if(sortOrder != null) {
                attributeDefSortOrders.add(sortOrder);
            }
            else
            {
                unsorted.add(attributeDef);
            }
        }
        Collections.sort(attributeDefSortOrders);
        for(int i = 0; i < attributeDefSortOrders.size(); i++)
        {
            AnnotationSchemaAttributeDefSortOrder sortOrder = attributeDefSortOrders.get(i);
            AttributeDef attributeDef = null;
            for(int j = 0; j < attributeDefs.size(); j++) {
                AttributeDef tAttributeDef = attributeDefs.get(j);
                if(tAttributeDef.getId().compareTo(sortOrder.getObjId()) == 0)
                {
                    attributeDef = tAttributeDef;
                    break;
                }
            }
            if(attributeDef != null) {
                attributeDefsSorted.add(attributeDef);
            }
        }
        if(unsorted.size() > 0) {
            attributeDefsSorted.addAll(unsorted);
        }
        return attributeDefsSorted;
    }

    public void setAttributeDefs(List<AttributeDef> attributeDefs) {
        this.attributeDefs = attributeDefs;
    }

    public void addAttributeDef(AttributeDef def) {
        def.setAnnotationSchema(this);
        this.getAttributeDefs().add(def);
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    @OrderBy("name")
    public List<ClassDef> getClassDefs() {
        return this.classDefs;
    }

    public List<ClassDef> doGetClassDefsSorted() {
        return sortClassDefs(this.classDefs);
    }

    public List<ClassDef> sortClassDefs(List<ClassDef> classDefs) {
        List<ClassDef> classDefsSorted = new ArrayList<ClassDef>();
        List<AnnotationSchemaClassDefSortOrder> classDefSortOrders = new ArrayList<AnnotationSchemaClassDefSortOrder>();
        List<ClassDef> unsorted = new ArrayList<ClassDef>();
        for(int i = 0; i < classDefs.size(); i++)
        {
            ClassDef classDef = classDefs.get(i);
            AnnotationSchemaClassDefSortOrder sortOrder = this.findClassDefSortOrder(classDef);
            if(sortOrder != null) {
                classDefSortOrders.add(sortOrder);
            }
            else
            {
                unsorted.add(classDef);
            }
        }
        Collections.sort(classDefSortOrders);
        for(int i = 0; i < classDefSortOrders.size(); i++)
        {
            AnnotationSchemaClassDefSortOrder sortOrder = classDefSortOrders.get(i);
            ClassDef classDef = null;
            for(int j = 0; j < classDefs.size(); j++) {
                ClassDef tClassDef = classDefs.get(j);
                if(tClassDef.getId().compareTo(sortOrder.getObjId()) == 0)
                {
                    classDef = tClassDef;
                    break;
                }
            }
            if(classDef != null) {
                classDefsSorted.add(classDef);
            }
        }
        if(unsorted.size() > 0) {
            classDefsSorted.addAll(unsorted);
        }
        return classDefsSorted;
    }

    public void setClassDefs(List<ClassDef> classDefs) {
        this.classDefs = classDefs;
    }

    public void addClassDef(ClassDef def) {
        def.setAnnotationSchema(this);
        this.getClassDefs().add(def);
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    @OrderBy("name")
    public List<ClassRelDef> getClassRelDefs() {
        return this.classRelDefs;
    }

    public List<ClassRelDef> doGetClassRelDefsSorted() {
        return sortClassRelDefs(this.classRelDefs);
    }

    public List<ClassRelDef> sortClassRelDefs(List<ClassRelDef> classRelDefs) {
        List<ClassRelDef> classRelDefsSorted = new ArrayList<ClassRelDef>();
        List<AnnotationSchemaClassRelDefSortOrder> classRelDefSortOrders = new ArrayList<AnnotationSchemaClassRelDefSortOrder>();
        List<ClassRelDef> unsorted = new ArrayList<ClassRelDef>();
        for(int i = 0; i < classRelDefs.size(); i++)
        {
            ClassRelDef classRelDef = classRelDefs.get(i);
            AnnotationSchemaClassRelDefSortOrder sortOrder = this.findClassRelDefSortOrder(classRelDef);
            if(sortOrder != null) {
                classRelDefSortOrders.add(sortOrder);
            }
            else
            {
                unsorted.add(classRelDef);
            }
        }
        Collections.sort(classRelDefSortOrders);
        for(int i = 0; i < classRelDefSortOrders.size(); i++)
        {
            AnnotationSchemaClassRelDefSortOrder sortOrder = classRelDefSortOrders.get(i);
            ClassRelDef classRelDef = null;
            for(int j = 0; j < classRelDefs.size(); j++) {
                ClassRelDef tClassRelDef = classRelDefs.get(j);
                if(tClassRelDef.getId().compareTo(sortOrder.getObjId()) == 0)
                {
                    classRelDef = tClassRelDef;
                    break;
                }
            }
            if(classRelDef != null) {
                classRelDefsSorted.add(classRelDef);
            }
        }
        if(unsorted.size() > 0) {
            classRelDefsSorted.addAll(unsorted);
        }
        return classRelDefsSorted;
    }

    public void setClassRelDefs(List<ClassRelDef> classRelDefs) {
        this.classRelDefs = classRelDefs;
    }

    public void addClassRelDef(ClassRelDef def) {
        def.setAnnotationSchema(this);
        this.getClassRelDefs().add(def);
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    public List<AnnotationSchemaAttributeDefSortOrder> getAttributeDefSortOrders() {
        return attributeDefSortOrders;
    }

    public void clearAttributeDefSortOrders() {
        this.attributeDefSortOrders.clear();
    }

    public void setAttributeDefSortOrders(List<AnnotationSchemaAttributeDefSortOrder> attributeDefSortOrders) {
        this.attributeDefSortOrders = attributeDefSortOrders;
    }

    public void addAttributeDefSortOrder(AnnotationSchemaAttributeDefSortOrder def) {
        def.setAnnotationSchema(this);
        this.getAttributeDefSortOrders().add(def);
    }

    public AnnotationSchemaAttributeDefSortOrder findAttributeDefSortOrder(AttributeDef attributeDef)
    {
        AnnotationSchemaAttributeDefSortOrder sortOrder = null;
        for(AnnotationSchemaAttributeDefSortOrder tSortOrder : this.attributeDefSortOrders)
        {
            int results = tSortOrder.getObjId().compareTo(attributeDef.getId());
            if(results == 0)
            {
                sortOrder = tSortOrder;
                break;
            }
        }
        return sortOrder;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    public List<AnnotationSchemaClassDefSortOrder> getClassDefSortOrders() {
        return classDefSortOrders;
    }

    public void clearClassDefSortOrders() {
        this.classDefSortOrders.clear();
    }

    public void setClassDefSortOrders(List<AnnotationSchemaClassDefSortOrder> classDefSortOrders) {
        this.classDefSortOrders = classDefSortOrders;
    }

    public void addClassDefSortOrder(AnnotationSchemaClassDefSortOrder def) {
        def.setAnnotationSchema(this);
        this.getClassDefSortOrders().add(def);
    }

    public AnnotationSchemaClassDefSortOrder findClassDefSortOrder(ClassDef ClassDef)
    {
        AnnotationSchemaClassDefSortOrder sortOrder = null;
        for(AnnotationSchemaClassDefSortOrder tSortOrder : this.classDefSortOrders)
        {
            int results = tSortOrder.getObjId().compareTo(ClassDef.getId());
            if(results == 0)
            {
                sortOrder = tSortOrder;
                break;
            }
        }
        return sortOrder;
    }

    @OneToMany(fetch = FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy = "annotationSchema")
    public List<AnnotationSchemaClassRelDefSortOrder> getClassRelDefSortOrders() {
        return classRelDefSortOrders;
    }

    public void clearClassRelDefSortOrders() {
        this.classRelDefSortOrders.clear();
    }

    public void setClassRelDefSortOrders(List<AnnotationSchemaClassRelDefSortOrder> classRelDefSortOrders) {
        this.classRelDefSortOrders = classRelDefSortOrders;
    }

    public void addClassRelDefSortOrder(AnnotationSchemaClassRelDefSortOrder def) {
        def.setAnnotationSchema(this);
        this.getClassRelDefSortOrders().add(def);
    }

    public AnnotationSchemaClassRelDefSortOrder findClassRelDefSortOrder(ClassRelDef ClassRelDef)
    {
        AnnotationSchemaClassRelDefSortOrder sortOrder = null;
        for(AnnotationSchemaClassRelDefSortOrder tSortOrder : this.classRelDefSortOrders)
        {
            int results = tSortOrder.getObjId().compareTo(ClassRelDef.getId());
            if(results == 0)
            {
                sortOrder = tSortOrder;
                break;
            }
        }
        return sortOrder;
    }

    @Column
    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    @Column
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Version
    public Timestamp getVersion() {
        return version;
    }

    public void setVersion(Timestamp version) {
        this.version = version;
    }

    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    @Transient
    public Map<String, ClassDef> getUimaAnnotationTypeToSchemaGuidMap() {
        Map<String, ClassDef> results = new HashMap<String, ClassDef>();

        addToAnnotationTypeToSchemaGuidMap(this.getClassDefs(), results);
        return results;
    }

    @Transient
    public Map<String, AttributeDef> getUimaFeatureTypeToSchemaGuidMap() {
        Map<String, AttributeDef> results = new HashMap<String, AttributeDef>();

        for (AttributeDef attributeDef : this.getAttributeDefs()) {
            results.put(attributeDef.getTypeSystemFeatureName(), attributeDef);
        }

        return results;
    }

    private void addToAnnotationTypeToSchemaGuidMap(Collection<ClassDef> list, Map<String, ClassDef> results) {
        if (list == null) {
            return;
        }
        for (ClassDef d : list) {
            results.put(d.getTypeSystemClassName(), d);
            addToAnnotationTypeToSchemaGuidMap(d.getClassDefs(), results);
        }
    }

    public int compareTo(AnnotationSchema compObj) {

        return compare(this, compObj);
    }

    static int compare(AnnotationSchema obj1, AnnotationSchema obj2) {

        String objName1 = obj1.getName();
        String objName2 = obj2.getName();
        return objName1.compareTo(objName2);
    }

    public void sortAttributeDefsByIdToOrderMap(Map<String, String> idToOrderMap) {
        Collections.sort(this.attributeDefs, new AttributeDefComparator(idToOrderMap));
    }

    private static class AttributeDefComparator implements Comparator<AttributeDef> {
        private Map<String, String> idToOrderMap;

        private AttributeDefComparator(Map<String, String> idToOrderMap) {
            this.idToOrderMap = idToOrderMap;
        }

        public int compare(AttributeDef o1, AttributeDef o2) {
            String id1 = o1.getId();
            String id2 = o2.getId();
            String value1 = (String)idToOrderMap.get(id1);
            String value2 = (String)idToOrderMap.get(id2);
            Integer order1 = new Integer(value1);
            Integer order2 = new Integer(value2);
            return order1.compareTo(order2);
        }
    }

    public void sortClassDefsByIdToOrderMap(Map<String, String> idToOrderMap) {
        Collections.sort(this.classDefs, new ClassDefComparator(idToOrderMap));
    }

    private static class ClassDefComparator implements Comparator<ClassDef> {
        private Map<String, String> idToOrderMap;

        private ClassDefComparator(Map<String, String> idToOrderMap) {
            this.idToOrderMap = idToOrderMap;
        }

        public int compare(ClassDef o1, ClassDef o2) {
            String id1 = o1.getId();
            String id2 = o2.getId();
            String value1 = (String)idToOrderMap.get(id1);
            String value2 = (String)idToOrderMap.get(id2);
            Integer order1 = new Integer(value1);
            Integer order2 = new Integer(value2);
            return order1.compareTo(order2);
        }
    }

    public void sortClassRelDefsByIdToOrderMap(Map<String, String> idToOrderMap) {
        Collections.sort(this.classRelDefs, new ClassRelDefComparator(idToOrderMap));
    }

    private static class ClassRelDefComparator implements Comparator<ClassRelDef> {
        private Map<String, String> idToOrderMap;

        private ClassRelDefComparator(Map<String, String> idToOrderMap) {
            this.idToOrderMap = idToOrderMap;
        }

        public int compare(ClassRelDef o1, ClassRelDef o2) {
            String id1 = o1.getId();
            String id2 = o2.getId();
            String value1 = (String)idToOrderMap.get(id1);
            String value2 = (String)idToOrderMap.get(id2);
            Integer order1 = new Integer(value1);
            Integer order2 = new Integer(value2);
            return order1.compareTo(order2);
        }
    }

    public void clearSorts()
    {
        this.attributeDefSortOrders.clear();
        this.classDefSortOrders.clear();
        this.classRelDefSortOrders.clear();
        for(AttributeDef attributeDef : this.attributeDefs)
        {
            attributeDef.clearSorts();
        }
        for(ClassDef classDef : this.classDefs)
        {
            classDef.clearSorts();
        }
        for(ClassRelDef classRelDef : this.classRelDefs)
        {
            classRelDef.clearSorts();
        }
    }

    public void applySorts()
    {
        List<AttributeDef> tAttributeDefsSorted = sortAttributeDefs(this.attributeDefs);
        this.attributeDefs.clear();
        for(AttributeDef attributeDef : tAttributeDefsSorted)
        {
            this.addAttributeDef(attributeDef);
        }
        List<ClassDef> tClassDefsSorted = sortClassDefs(this.classDefs);
        this.classDefs.clear();
        for(ClassDef classDef : tClassDefsSorted)
        {
            this.addClassDef(classDef);
        }
        List<ClassRelDef> tClassRelDefsSorted = sortClassRelDefs(this.classRelDefs);
        this.classRelDefs.clear();
        for(ClassRelDef classRelDef : tClassRelDefsSorted)
        {
            this.addClassRelDef(classRelDef);
        }
    }
}
